装饰模式

核心
【1】对象组合，在组合的同时顺便添加一些功能，从而达到一层一层装饰的效果
【2】抽象的装饰器必须要实现和被装饰的对象一样的接口，这样才可以使用同样的方式依次组装下去。如果不实现同一个接口，那就是单纯的对象组合。


思考对象组合和继承：
继承会将被装饰的对象所有的方法都继承过来，如果只是要扩展一部分的话，继承并不是很好的做法。
通过对象组合，在装饰对象的方法中调用被装饰对象的某个方法，并在调用前后实现要扩展的操作，这是一种比较好的做法。

各装饰器之间最好不要有依赖，有依赖的话就会有顺序，要避免有顺序。

装饰器是用来装饰组件的，装饰器一定要实现和组件类一致的接口，保证它们是同一个类型，并具有同一个外观，这样组合完成的装饰才能够递归的调用下去。

组件类是不知道装饰器的存在的，装饰器给组件添加功能是一种透明的包装，组件类毫不知情。需要改变的是外部使用组件类的地方，现在需要使用包装后的类，接口是一样的，但是具体的实现类发生了改变。

如果仅仅只是想要添加一个功能，就没有必要再设计装饰器的抽象类了，直接在装饰器里面实现跟组件一样的接口，然后实现相应的装饰功能就可以了。但是建议最好还是设计上装饰器的抽象类，这样有利于程序的扩展。



心得：
适合各个算法之间有关联，而且使用的一套算法会动态变化的情况。
如果各个算法之间是独立，没有关系的，考虑使用策略模式

